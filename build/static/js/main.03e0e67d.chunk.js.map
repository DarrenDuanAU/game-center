{"version":3,"sources":["components/WordGuess/components/Chip.js","components/Button/Button.js","data/wordStrs.js","components/WordGuess/WordGuess.js","components/SlidingPuzzle/components/Cell.js","components/SlidingPuzzle/constants.js","data/shrek/1.png","data/shrek/2.png","data/shrek/3.png","data/shrek/4.png","data/shrek/5.png","data/shrek/6.png","data/shrek/7.png","data/shrek/8.png","data/shrek/9.png","components/SlidingPuzzle/SlidingPuzzle.js","utils/commonFunctions.js","components/Tetris/constants.js","components/Tetris/components/Square.js","components/Tetris/components/SquareLayer.js","components/Tetris/components/Block.js","components/Tetris/components/BlockLayer.js","components/Tetris/functions.js","components/Tetris/Tetris.js","components/Home/components/ScoreBoard.js","components/Home/Home.js","assets/logo.png","components/Header/components/Logo.js","components/Header/components/Navbar.js","components/Header/Header.js","components/Footer/Footer.js","App.js","index.js"],"names":["Chip","_ref","char","index","onChange","_jsx","_Fragment","children","className","id","maxLength","autoComplete","Button","onClick","wordStrs","WordGuess","setScore","intervalIds","_useState","useState","_useState2","_slicedToArray","currentWord","setCurrentWord","_useState3","_useState4","markedWord","setMarkedWord","_useState5","_useState6","clickCounter","setClickCounter","_useState7","_useState8","inputIds","setInputIds","_useState9","_useState10","WordGuessScore","setWorGuessScore","useEffect","current","forEach","intervalId","clearInterval","length","prevState","s","tempWord","split","i","tempInputIds","markIndex","Math","floor","random","push","join","checkAnswer","e","chipId","Number","target","chipValue","value","preState","concat","_toConsumableArray","filter","item","_jsxs","map","character","randomIndex","Cell","piece","src","alt","SHREK_PIECES","PUZZLE_CLICK_MAP","click","check","SlidingPuzzle","firstUpdate","useRef","imageIds","SetImageIds","gameStarted","setGameStarted","mask","setMask","startTheGame","OriginImageIds","array","j","temp","shuffleArray","JSON","stringify","alert","imageId","locationId","_PUZZLE_CLICK_MAP$fin","locationChecks","find","_loop","targetLocationId","firstIndex","secIndex","swapTwoElementsInArray","switchImage","MAX_Y","CHIP_THEME","color","INIT_DATA","Array","fill","START_BLOCK_COOR","Square","coor","themeCode","SquareLayer","squares","row","y","x","Block","BlockLayer","blocks","getColoredCoorTheme","data","coorColor","colorCode","BlockHandler","direction","localData","shift","defColorArray","newRow","slice","unshift","console","log","Tetris","gameStart","setGameStart","status","setStatus","setSquares","setBlocks","prevBlocksRef","prevSquaresRef","tetrisScore","setTetrisScore","newCoors","index_y","index_x","some","_ref2","_ref3","setInterval","prevBlocks","coloredCoors","currentSquare","coloredRowIndexList","counter","coloredRowIndexListReverse","reverse","winScore","prevSquares","rowIndex","splice","hasCollision","nextBlock","blockColoredDict","moveBlock","reeachedBoundary","willCollision","local_data","result","MAX_X","reeachedBoundaryOn","ScoreBoard","score","Home","Logo","logo","width","height","Navbar","onNavbarClick","page","Header","onHeaderClick","Footer","App","currentPage","setCurrentPage","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03e0e67d.chunk.js","sourcesContent":["const Chip = ({\n  char,\n  index,\n  onChange\n}) => {\n  // const [value, setValue] = useState('')\n\n  return (\n    <>\n      <div className=\"chip\">\n        { char === '?'\n        ? <input className=\"WordGuess_input\" onChange={onChange} id={index} maxLength={1} autoComplete=\"off\" ></input>\n        : char}\n      </div>\n    </>\n  )\n}\nexport default Chip;","const Button = ({\n  onClick,\n  children\n}) =>{\n\n  return (\n    <button className=\"button\" onClick={onClick}>\n      {children}\n    </button>\n  )\n} \nexport default Button;","export const wordStrs = [\n    'the fat cats',\n    'larger frogs',\n    'banana cakes',\n    'unsw vs usyd',\n    'french toast',\n    'hawaii pizza',\n    'barack obama',\n];","import Chip from './components/Chip'\nimport Button from '../Button/Button'\nimport { wordStrs } from '../../data/wordStrs'\nimport { useEffect, useState } from 'react'\nimport './style.css'\n\nconst WordGuess = ({\n  setScore,\n  intervalIds\n}) => {\n  const [currentWord, setCurrentWord] = useState(\"CLICK 2START\");\n  const [markedWord, setMarkedWord] = useState(\"CLICK 2START\");\n  const [clickCounter, setClickCounter] = useState(0);\n  const [inputIds, setInputIds] = useState([0])\n  const [WordGuessScore, setWorGuessScore] = useState(0)\n\n  useEffect(()=> {\n    intervalIds.current.forEach(intervalId => clearInterval(intervalId))\n  },[intervalIds])\n\n\n  useEffect(() => {\n    if(inputIds.length === 0) {\n      setScore(prevState => prevState + 3)\n      setWorGuessScore(s => s + 3)\n    }\n  }, [inputIds,setScore])\n\n\n  useEffect(() => {\n    if (currentWord === \"CLICK 2START\" ){\n      setMarkedWord(currentWord);\n    } else {\n      let tempWord = currentWord.split('');\n      let i = 0;\n      let tempInputIds = []\n      while ( i < 3 ) {\n        const markIndex = Math.floor( Math.random() * 12 );\n        if ( tempWord[markIndex]!== ' ' && tempWord[markIndex]!=='?'){\n          tempInputIds.push(markIndex)\n          tempWord[markIndex]='?';\n          i += 1;\n        }\n      }\n      setInputIds(tempInputIds)\n      setMarkedWord(tempWord.join(''));\n    }\n  },[currentWord]);\n\n\n  const updateWord = () => {\n    let randomIndex = Math.floor(Math.random() * wordStrs.length) \n    while ( wordStrs[randomIndex] === currentWord ){\n      randomIndex = Math.floor(Math.random() * wordStrs.length) \n    }\n    setCurrentWord(wordStrs[randomIndex])\n    setClickCounter(preState => preState + 1)\n  }\n\n  const checkAnswer = (e) => {\n    const chipId = Number(e.target.id);\n    const chipValue = e.target.value;\n    // console.log(chipId, chipValue);\n\n    if ( chipValue === '') {\n      setInputIds(preState => [...preState, chipId])\n    } \n    if ( chipValue === currentWord[chipId] ) {\n      setInputIds(preState => preState.filter((item) => item !== chipId))\n    } \n  }\n\n  return (\n    <div className='container'>\n      <di className='word_guess_scoreboard'>Word Guess Score: {WordGuessScore}</di>   \n      <div className=\"upper_container\">\n        { markedWord.split('').map( (character ,index) =>  (<Chip key={`${clickCounter} - ${index}`} onChange={checkAnswer} index={index} char={character} />)) }\n        \n      </div>\n      <div className='low_container'>\n          <Button onClick={updateWord}>\n            {currentWord === \"CLICK 2START\" \n            ? \n              \"Start\"\n            : \n              \"Next\"\n            }\n          </Button>\n          {/* {inputIds.map((item,index) => <div key={index}>{item}</div>)} */}\n      </div>\n    </div>\n  )\n}\nexport default WordGuess;","\nconst Cell = ({\n  piece,\n  onClick,\n}) => {\n  return (\n    <div \n      className=\"cell\"\n      onClick={onClick}\n    >\n      <img \n        src={piece}\n        alt=\"shrek_pieces\"\n      >\n      </img>\n    </div>\n  )\n}\nexport default Cell;","import { chip0, chip1, chip2, chip3, chip4, chip5, \n  chip6, chip7, chip8} from '../../data/shrek'\n\nexport const OriginImageIds = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n\n\nexport const SHREK_PIECES = [\n  chip0, chip1, chip2, chip3, chip4,chip5, \n  chip6, chip7, chip8\n]\n\nexport const PUZZLE_CLICK_MAP = [\n  { click: 0, check: [1, 3] },\n  { click: 1, check: [0, 2, 4] },\n  { click: 2, check: [1, 5] },\n  { click: 3, check: [0, 4, 6] },\n  { click: 4, check: [1, 3, 5, 7] },\n  { click: 5, check: [2, 4, 8] },\n  { click: 6, check: [3, 7] },\n  { click: 7, check: [4, 6, 8] },\n  { click: 8, check: [5, 7] }\n]","export default __webpack_public_path__ + \"static/media/1.fc6bde86.png\";","export default __webpack_public_path__ + \"static/media/2.ed7dca6a.png\";","export default __webpack_public_path__ + \"static/media/3.aff7d8e5.png\";","export default __webpack_public_path__ + \"static/media/4.e435c05d.png\";","export default __webpack_public_path__ + \"static/media/5.428142a1.png\";","export default __webpack_public_path__ + \"static/media/6.01949773.png\";","export default __webpack_public_path__ + \"static/media/7.599fb031.png\";","export default __webpack_public_path__ + \"static/media/8.a6b684fd.png\";","export default __webpack_public_path__ + \"static/media/9.449d155a.png\";","import { useState, useEffect, useRef } from 'react'\nimport './style.css'\nimport Cell from './components/Cell'\nimport Button from '../Button'\nimport { shuffleArray, swapTwoElementsInArray } from '../../utils/commonFunctions'\nimport { SHREK_PIECES,PUZZLE_CLICK_MAP } from './constants'\n\n\nconst SlidingPuzzle = ({\n  setScore,\n  intervalIds\n}) => {\n  const firstUpdate = useRef(0);\n  const [imageIds, SetImageIds] = useState([0, 1, 2, 3, 4, 5, 6, 7, 8]);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [mask, setMask] = useState('mask')\n\n  const startTheGame = () => {\n    setGameStarted(prevState => !prevState);\n  }\n\n  useEffect(()=> {\n    intervalIds.current.forEach(intervalId => clearInterval(intervalId))\n  },[intervalIds])\n\n  useEffect(() => {\n    const OriginImageIds = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n    if ( gameStarted === true){\n      SetImageIds(shuffleArray(OriginImageIds));\n      setMask('mask mask-active')\n    } else {\n      SetImageIds(OriginImageIds);\n      setMask('mask')\n    }\n  },[gameStarted]);\n\n  useEffect(() => {\n    //console.log('in useEffect')\n    if (firstUpdate.current >=2 &&\n      JSON.stringify(imageIds) === JSON.stringify([0, 1, 2, 3, 4, 5, 6, 7, 8])){\n        alert('you won 10 marks!')\n        setScore(prevState => prevState + 10)\n    } else {\n      firstUpdate.current = firstUpdate.current + 1\n      //console.log('in initial2',imageIds, firstUpdate.current)\n    }\n  },[imageIds,setScore]);\n\n\n  const switchImage = (locationId) => {\n    const locationChecks = PUZZLE_CLICK_MAP.find((item) => item.click === locationId)?.check \n    for( let i=0 ; i<locationChecks.length ; i++ ) {\n      if( imageIds[locationChecks[i]] === 8 ) {\n        const targetLocationId = locationChecks[i]\n        SetImageIds((prevState) => {\n          return swapTwoElementsInArray([...prevState], locationId, targetLocationId)\n        });\n      }\n    }\n  }\n\n  return(\n    <div className='container'>\n      <div className='sliding_puzzle_scoreBoard'>Solve puzzle to win 10 points</div>\n      <div className=\"SlidingPuzzle_main_container\">\n        <div className={mask}></div>\n        {imageIds.map((imageId,index) => \n          (<Cell \n            key={index} \n            piece={SHREK_PIECES[imageId]}\n            onClick = {() => switchImage(index)}\n            />) ) \n        }\n      </div>\n      <div className='low_container'>\n        {gameStarted === false \n          ? \n          <Button onClick={startTheGame}>Start</Button> \n          : \n          <Button onClick={startTheGame}>Solve</Button>}     \n      </div>\n      {/* {firstUpdate.current} */}\n    </div>\n  )\n}\nexport default SlidingPuzzle;\n\n\n","export const shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nexport const swapTwoElementsInArray = (array, firstIndex, secIndex) => {\n  let temp = array[firstIndex];\n  array[firstIndex] = array[secIndex];\n  array[secIndex] = temp;\n  return array;\n}\n","export const MAX_Y = 15\nexport const MAX_X = 10\n\nexport const DIRECTION_LIST = ['right','down','left']\n\nexport const DEF_CHIP_THEME_CODE = 0\nexport const CHIP_THEME = {\n  0: {color: 'blue'},\n  1: {color: 'grey'}\n}\n\nexport const INIT_DATA = new Array(MAX_Y).fill(new Array(MAX_X).fill(0))\n\nexport const START_BLOCK_COOR = [\n  [[4,MAX_Y-1]],\n  [[4,MAX_Y-1],[4,MAX_Y-2]],\n  [[4,MAX_Y-1],[4,MAX_Y-2],[5,MAX_Y-1],[5,MAX_Y-2]]\n]\n\n","import { CHIP_THEME, DEF_CHIP_THEME_CODE } from \"../constants\";\n\nconst Square = ({\n  coor,\n  themeCode\n}) => {\n  return (\n    <div className={`square square_${CHIP_THEME[themeCode].color}`}>\n      {/* {coor} */}\n      <div className={themeCode !== DEF_CHIP_THEME_CODE ?'triangle':''}></div>\n    </div>\n  )\n}\nexport default Square;","import Square from \"./Square\";\n\nconst SquareLayer = ({squares}) => {\n  return (\n    <>\n     {squares?.map((row, y)=>(\n      row?.map((themeCode, x)=>(\n        <Square key={x+'-'+y} themeCode={themeCode} coor={x+'-'+y}></Square>\n      ))\n    ))}\n    </>\n  )\n}\n\nexport default SquareLayer;","import { CHIP_THEME,DEF_CHIP_THEME_CODE } from \"../constants\";\n\nconst Block = ({\n  coor,\n  themeCode\n}) => {\n  return (\n    <div className={`block block_${CHIP_THEME[themeCode].color}`}>\n      {/* {coor} */}\n      <div className={themeCode !== DEF_CHIP_THEME_CODE ?'triangle':''}></div>\n    </div>\n  )\n}\nexport default Block;","import Block from \"./Block\";\n\nconst BlockLayer = ({blocks}) => {\n  return (\n    <>\n      {blocks?.map((row, y)=>(\n        row?.map((themeCode, x)=>(\n          <Block key={x+'-'+y} themeCode={themeCode} coor={x+'-'+y}></Block>\n        ))\n      ))}\n    </>\n  )\n}\nexport default BlockLayer;","import { DEF_CHIP_THEME_CODE ,MAX_X } from \"./constants\";\n\nexport const randomPick = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getColoredCoorTheme = (data) => {\n  const coorColor = {}\n  data.forEach((row, y) => {\n    row.forEach((colorCode, x) => {\n      if (colorCode !== DEF_CHIP_THEME_CODE) {\n        if (x in coorColor) {\n          coorColor[x][y] = colorCode\n        } else {\n          coorColor[x] = {}\n          coorColor[x][y] = colorCode\n        }\n      }\n    })\n  })\n  return coorColor\n}\n\nexport const getColoredCoors = (data) => {\n  let coloredCoors = []\n  data.forEach((row,y) => {\n    row.forEach((colorCode,x) => {\n      if (colorCode !== DEF_CHIP_THEME_CODE){\n        coloredCoors.push([x,y])\n      }\n    })\n  })\n  return coloredCoors\n}\n\nexport const reeachedBoundaryOn = (data) => {\n  const local_data = [...data]\n  let result = 'no'\n  local_data.forEach((row, y) => {\n    row.forEach((colorCode, x) => {\n      if( x === 0 && colorCode !== DEF_CHIP_THEME_CODE) {\n        result = 'left'\n      }\n\n      if (x === MAX_X - 1 && colorCode !== DEF_CHIP_THEME_CODE ) {\n        result = 'right'\n      }\n    })\n  })\n  return result\n}\n\n\nexport const BlockHandler = (data, direction) => {\n  let localData = [...data]\n  switch(direction){\n    case 'down':\n      localData.shift();\n      const defColorArray = new Array(MAX_X).fill(DEF_CHIP_THEME_CODE);\n      localData.push(defColorArray);\n      return localData\n    case 'left':\n      return localData.map((row)=>{\n        let newRow=row.slice(1)\n        newRow.push(DEF_CHIP_THEME_CODE)\n        return newRow\n      })\n    case 'right':\n      return localData.map((row)=>{\n        let newRow=row.slice(0,row.length-1)\n        newRow.unshift(DEF_CHIP_THEME_CODE)\n        return newRow\n      })\n    default:\n      console.log('function BlockHandler: invalid direction')\n  }\n}\n","import './style/style.css'\nimport { useEffect, useState, useRef } from 'react'\nimport SquareLayer from './components/SquareLayer'\nimport BlockLayer from './components/BlockLayer'\n\nimport Button from '../Button'\nimport { INIT_DATA, \n  DEF_CHIP_THEME_CODE, \n  START_BLOCK_COOR, \n  MAX_X} from './constants'\nimport { randomPick, \n  getColoredCoorTheme, \n  BlockHandler,\n  reeachedBoundaryOn } from './functions'\n\nconst Tetris = ({\n  setScore,\n  intervalIds\n}) =>{\n  const [gameStart, setGameStart] = useState(false)\n  const [status, setStatus] = useState('notStart')\n  const [squares, setSquares] = useState(INIT_DATA)\n  const [blocks, setBlocks] = useState(INIT_DATA)\n  const prevBlocksRef = useRef(blocks)\n  const prevSquaresRef = useRef(squares)\n  const [tetrisScore, setTetrisScore] = useState(0)\n\n  // useEffect(()=>{\n  //   document.addEventListener('keydown', (event) =>{\n  //     const direction = event.key.slice(5).toLowerCase()\n  //     console.log(direction);\n  //     moveBlock(direction)\n  //   })\n  // },[])\n\n  useEffect(()=> {\n    prevBlocksRef.current=blocks\n  },[blocks])\n\n  useEffect(()=> {\n    prevSquaresRef.current=squares\n  },[squares])\n\n  useEffect(() => {\n    switch(status) {\n      case 'newBlock':\n        const newColorCode = 1;\n        const newCoors = randomPick(START_BLOCK_COOR);\n        setBlocks((prevState) => {\n          const prevBlocks = [...prevState];\n          return prevBlocks.map((row, index_y) => {\n            return row.map((colorCode, index_x) => {\n              if (newCoors.some(([x, y]) => x === index_x && y === index_y)) {\n                return newColorCode;\n              } else {\n                return colorCode;\n              }\n            });\n          });\n        });\n        setStatus('start')\n        break\n      case 'start':\n        // console.log('start!')\n        const intervalId = setInterval(() => {\n          setBlocks((prevState) => {\n            const prevBlocks = [...prevState];\n            return BlockHandler(prevBlocks,'down')\n          });\n        }, 1000);\n        intervalIds.current.push(intervalId)\n        break\n      case 'collision':\n        // console.log('collision')\n        intervalIds.current.forEach(intervalId => clearInterval(intervalId))\n        const coloredCoors = getColoredCoorTheme([...prevBlocksRef.current])\n        setBlocks(INIT_DATA)\n        setSquares( prevState => {\n          const temp = [...prevState]\n          return temp.map((row, y) => {\n            return row.map((colorCode, x) => {\n              if(x in coloredCoors && y in coloredCoors[x]) {\n                return coloredCoors[x][y]\n              }else {\n                return colorCode\n              }\n            })\n          })\n        })\n        setStatus('removeRows')\n        break\n\n      case 'removeRows':\n        // console.log('removeRows')  \n        const currentSquare = [...prevSquaresRef.current]\n        const coloredRowIndexList = []\n        currentSquare.forEach((row, y) => {\n          let counter = 0\n          row.forEach((colorCode) => {\n            if (colorCode !== DEF_CHIP_THEME_CODE) {\n              counter += 1\n            }\n          })\n          if ( counter === MAX_X) {\n            coloredRowIndexList.push(y)\n          }\n        })\n        const coloredRowIndexListReverse = coloredRowIndexList.reverse()\n        const winScore = coloredRowIndexListReverse.length\n        setScore(s => s + winScore)\n        setTetrisScore(s => s + winScore)\n        // console.log('row to remove',coloredRowIndexListReverse)\n        if (coloredRowIndexListReverse.length !== 0) {\n          setSquares(prevSquares => {\n            const temp = [...prevSquares]\n            coloredRowIndexListReverse.forEach((rowIndex) => {\n              temp.splice(rowIndex,1)\n              const defColorArray = new Array(MAX_X).fill(DEF_CHIP_THEME_CODE);\n              temp.push(defColorArray)\n            })\n            return temp\n          })\n        }\n        setStatus('newBlock')\n        break\n\n      default:\n        console.log('invalid game status')\n    }\n\n  }, [status,setScore,intervalIds]);\n\n  useEffect(()=>{\n    // console.log(getColoredCoors(blocks))\n    let hasCollision = false;\n    blocks.forEach((row,y) => {\n        row.forEach((colorCode, x) => {\n          if(y === 0 && colorCode !== DEF_CHIP_THEME_CODE ) {\n            hasCollision = true\n          }\n        })\n    })\n    if (hasCollision) {\n      setStatus('collision')\n      return\n    }\n\n  },[blocks])\n\n  useEffect(()=>{\n    if (blocks !== INIT_DATA) {\n\n      let hasCollision = false;\n      const nextBlock = BlockHandler([...blocks], 'down')\n      const blockColoredDict = getColoredCoorTheme(nextBlock)\n  \n      const currentSquare = [...prevSquaresRef.current]\n      currentSquare.forEach((row, y) => {\n        row.forEach((colorCode, x) => {\n          if ( x in blockColoredDict \n            && y in blockColoredDict[x] \n            && blockColoredDict[x][y] !== DEF_CHIP_THEME_CODE \n            && colorCode !== DEF_CHIP_THEME_CODE ){\n              \n            hasCollision = true\n          }\n        })\n      })\n  \n      if (hasCollision) {\n        setStatus('collision')\n        return\n      }\n    }\n   \n  },[blocks])\n\n\n\n\n  const startGame = () => {\n    setStatus('newBlock')\n    setGameStart(true)\n  }\n\n  const moveBlock = (direction) => {\n\n    let reeachedBoundary = false\n    let willCollision = false\n\n    if (reeachedBoundaryOn([...blocks]) === direction) {\n      reeachedBoundary = true\n    } \n\n    if (!reeachedBoundary) {\n      const nextBlock = BlockHandler([...blocks],direction)\n      const blockColoredDict = getColoredCoorTheme(nextBlock)\n      const currentSquare = [...squares]\n      currentSquare.forEach((row, y) => {\n        row.forEach((colorCode, x) => {\n          if ( x in blockColoredDict \n            && y in blockColoredDict[x] \n            && blockColoredDict[x][y] !== DEF_CHIP_THEME_CODE \n            && colorCode !== DEF_CHIP_THEME_CODE ){\n              \n            willCollision = true\n          }\n        })\n      })\n    }\n\n    if (!reeachedBoundary && !willCollision) {\n      setBlocks((prevState) => {\n        const prevBlocks = [...prevState];\n        const updatedBlocks = BlockHandler(prevBlocks, direction);\n        return updatedBlocks;\n      });\n    }\n  }\n\n  return (\n    <div className='container'>\n      <div className='Teris_score_board' >Tetris score: {tetrisScore}</div>\n      <div className='Tetris_upper_container'>\n        <SquareLayer squares={squares}/>\n        <div className='above_Tetris_upper_container'>\n          <BlockLayer blocks={blocks}/>\n        </div>\n      </div>\n      <div className='lower_container'>\n        {gameStart\n          ? (<>\n            <Button onClick={() => moveBlock('left')}>L</Button>\n            <Button onClick={() => moveBlock('down')}>D</Button>\n            <Button onClick={() => moveBlock('right')}>R</Button>\n          </>)\n          : <Button onClick={startGame}>start</Button>\n        }\n      </div>\n    </div>\n    \n    \n  )\n}\nexport default Tetris;","const ScoreBoard = ({\n  score\n}) => {\n  return (\n    <div>\n      Your total score: {score}\n    </div>\n  )\n}\nexport default ScoreBoard;","import { useEffect } from 'react'\nimport ScoreBoard from './components/ScoreBoard'\nimport './style.css'\n\nconst Home = ({\n  score,\n  intervalIds\n}) => {\n  useEffect(()=> {\n    intervalIds.current.forEach(intervalId => clearInterval(intervalId))\n  },[intervalIds])\n\n  return (\n  <div className='home'>\n    <div>\n    Please Choose a game from the Navbar!\n    </div>\n    <ScoreBoard score={score}/>\n  </div>\n  \n)\n\n}\nexport default Home;","export default __webpack_public_path__ + \"static/media/logo.d8811d42.png\";","import logo from '../../../assets/logo.png';\nconst Logo = () => (\n  <div className='log'>\n    <img \n      src={logo} \n      alt=\"logo\" \n      width={45} \n      height={45} \n    />\n  </div>\n)\nexport default Logo;","import Button from '../../Button'\n\nconst Navbar = ({\n  onNavbarClick\n}) => {\n  const PAGES_NAME = [\n    { page: \"Home\" },\n    { page: \"Tetris\" },\n    { page: \"Sliding Puzzle\" },\n    { page: \"Word Guess\" },\n  ];\n\n\n  return (\n    <div>\n      {PAGES_NAME.map(({page}) => ( \n      <Button key={page} onClick={() => onNavbarClick(page)}>\n        {page}\n      </Button> ))}\n    </div>\n  )\n}\nexport default Navbar;","import Logo from './components/Logo'\nimport Navbar from './components/Navbar'\n\nconst Header = ({\n  onHeaderClick\n}) => {\n\n\n  return (\n    <div className='header'>\n      <Logo />\n      <Navbar onNavbarClick={onHeaderClick}/>\n    </div>\n  )\n}\nexport default Header;","import './style.css'\nconst Footer = () => (\n  <div className=\"footer\">\n    <p className='copy-right'>© 2023 DarrenDuan, Inc. All rights reserved.</p>\n  </div>\n)\nexport default Footer;","import './style/App.css';\nimport './input.css'\nimport WordGuess from './components/WordGuess';\nimport SlidingPuzzle from './components/SlidingPuzzle';\nimport Tetris from './components/Tetris';\nimport Home from './components/Home';\nimport Header from './components/Header';\nimport Footer from './components/Footer'\nimport { useState, useRef } from 'react'\nimport React from 'react'\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [currentPage, setCurrentPage] = useState(\"Home\")\n  const intervalIds = useRef([])\n\n  const ButtonClickHandler = (page) => {\n    setCurrentPage(page)\n  }\n\n  return (\n    <>\n      <Header onHeaderClick={ButtonClickHandler}/>\n      <div className='page'>          \n        {(currentPage === \"Home\") && <Home score={score} intervalIds={intervalIds}/>}\n        {(currentPage === \"Sliding Puzzle\") && <SlidingPuzzle setScore={setScore} intervalIds={intervalIds}/>}\n        {(currentPage === \"Tetris\") && <Tetris setScore={setScore} intervalIds={intervalIds}/>}\n        {(currentPage === \"Word Guess\") && <WordGuess setScore={setScore} intervalIds={intervalIds}/>}\n      </div>\n      <Footer />\n    </>\n  )\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}